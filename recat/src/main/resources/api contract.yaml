openapi: 3.0.0
info:
  title: Recat API
  version: 1.0.0
  description: API for managing an online book library/catalog
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/KoladeAmire/recat-api/1.0.0
  - url: http://localhost:8080/api
paths:
  /users:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered
    get:
      summary: View all users (admin privilege)
      operationId: getAllUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/login:
    post:
      summary: Login/authentication
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      summary: View user profile
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Edit user details
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User profile updated
    delete:
      summary: Delete profile
      operationId: deleteUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User profile deleted
  /users/{userId}/favorites:
    post:
      summary: Add a book to user's favorites
      operationId: addUserFavorite
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
      responses:
        '201':
          description: Book added to favorites
        '400':
          description: Invalid input
        '404':
          description: User or book not found
    get:
      summary: View books user added to favorites
      operationId: getUserFavorites
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of favorite books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /users/{userId}/read:
    get:
      summary: View books read by user
      operationId: getUserReadBooks
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of read books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /users/{userId}/favorite-authors:
    get:
      summary: View authors user added to favorites
      operationId: getUserFavoriteAuthors
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of favorite authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /books:
    get:
      summary: View all books
      operationId: getAllBooks
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add new book (admin privilege)
      operationId: addBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book added
  /books/search:
    get:
      summary: Search books
      operationId: searchBooks
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: author
          in: query
          schema:
            type: string
        - name: isbn
          in: query
          schema:
            type: string
      responses:
        '200':
          description: search for books

  /books/{bookId}:
    put:
      summary: Edit book details (admin privilege)
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book details updated
    delete:
      summary: Delete book (admin privilege)
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted

  /categories:
    get:
      summary: View all categories
      operationId: getAllCategories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Add new category (admin privilege)
      operationId: addCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category added

  /categories/{categoryId}:
    put:
      summary: Edit category details (admin privilege)
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category details updated
    delete:
      summary: Delete category (admin privilege)
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted
  /authors:
    get:
      summary: View all authors
      operationId: getAllAuthors
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add new author (admin privilege)
      operationId: addAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid input
        '403':
          description: Forbidden (insufficient privileges)
        '500':
          description: Internal server error


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        gender:
          type: string
        role:
          type: string

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        authorId:
          type: integer
          format: int64
        description:
          type: string
        publicationYear:
          type: integer
        coverImageUrl:
          type: string
        isbn:
          type: string
        categoryId:
          type: integer
          format: int64

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
